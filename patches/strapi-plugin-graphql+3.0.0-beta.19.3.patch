diff --git a/node_modules/strapi-plugin-graphql/admin/src/index.js b/node_modules/strapi-plugin-graphql/admin/src/index.js
index 47c9503..2cd8f6c 100644
--- a/node_modules/strapi-plugin-graphql/admin/src/index.js
+++ b/node_modules/strapi-plugin-graphql/admin/src/index.js
@@ -1,10 +1,16 @@
+// NOTE TO PLUGINS DEVELOPERS:
+// If you modify this file by adding new options to the plugin entry point
+// Here's the file: strapi/docs/3.0.0-beta.x/plugin-development/frontend-field-api.md
+// Here's the file: strapi/docs/3.0.0-beta.x/guides/registering-a-field-in-admin.md
+// Also the strapi-generate-plugins/files/admin/src/index.js needs to be updated
+// IF THE DOC IS NOT UPDATED THE PULL REQUEST WILL NOT BE MERGED
+
 import pluginPkg from '../../package.json';
 import pluginId from './pluginId';
 import pluginLogo from './assets/images/logo.svg';
 
 export default strapi => {
-  const pluginDescription =
-    pluginPkg.strapi.description || pluginPkg.description;
+  const pluginDescription = pluginPkg.strapi.description || pluginPkg.description;
 
   const plugin = {
     blockerComponent: null,
diff --git a/node_modules/strapi-plugin-graphql/config/settings.json b/node_modules/strapi-plugin-graphql/config/settings.json
index 07ddc3f..74050cc 100644
--- a/node_modules/strapi-plugin-graphql/config/settings.json
+++ b/node_modules/strapi-plugin-graphql/config/settings.json
@@ -5,5 +5,6 @@
   "playgroundAlways": false,
   "depthLimit": 7,
   "amountLimit": 100,
-  "shareEnabled": false
+  "shareEnabled": false,
+  "federation": false
 }
diff --git a/node_modules/strapi-plugin-graphql/hooks/graphql/index.js b/node_modules/strapi-plugin-graphql/hooks/graphql/index.js
index 1c7f0c1..255d214 100644
--- a/node_modules/strapi-plugin-graphql/hooks/graphql/index.js
+++ b/node_modules/strapi-plugin-graphql/hooks/graphql/index.js
@@ -7,6 +7,7 @@
 // Public node modules.
 const _ = require('lodash');
 const { ApolloServer } = require('apollo-server-koa');
+const { buildFederatedSchema } = require('@apollo/federation');
 const depthLimit = require('graphql-depth-limit');
 const loadConfigs = require('./load-config');
 
@@ -67,18 +68,10 @@ module.exports = strapi => {
         return attachMetadataToResolvers(schema, { plugin: key });
       });
 
-      const baseSchema = mergeSchemas([
-        ...apisSchemas,
-        ...pluginsSchemas,
-        ...extensionsSchemas,
-      ]);
+      const baseSchema = mergeSchemas([...apisSchemas, ...pluginsSchemas, ...extensionsSchemas]);
 
       // save the final schema in the plugin's config
-      _.set(
-        strapi,
-        ['plugins', 'graphql', 'config', '_schema', 'graphql'],
-        baseSchema
-      );
+      _.set(strapi, ['plugins', 'graphql', 'config', '_schema', 'graphql'], baseSchema);
     },
 
     initialize() {
@@ -87,16 +80,23 @@ module.exports = strapi => {
       ].generateSchema();
 
       if (_.isEmpty(typeDefs)) {
-        strapi.log.warn(
-          'The GraphQL schema has not been generated because it is empty'
-        );
+        strapi.log.warn('The GraphQL schema has not been generated because it is empty');
 
         return;
       }
 
+      // Get federation config
+      const isFederated = _.get(strapi.plugins.graphql, 'config.federation', false);
+      const schemaDef = {};
+      if (isFederated) {
+        schemaDef.schema = buildFederatedSchema([{ typeDefs, resolvers }]);
+      } else {
+        schemaDef.typeDefs = typeDefs;
+        schemaDef.resolvers = resolvers;
+      }
+
       const serverParams = {
-        typeDefs,
-        resolvers,
+        ...schemaDef,
         context: ({ ctx }) => {
           // Initiliase loaders for this request.
           // TODO: set loaders in the context not globally
@@ -112,11 +112,7 @@ module.exports = strapi => {
         playground: false,
         cors: false,
         bodyParserConfig: true,
-        introspection: _.get(
-          strapi.plugins.graphql,
-          'config.introspection',
-          true
-        ),
+        introspection: _.get(strapi.plugins.graphql, 'config.introspection', true),
       };
 
       // Disable GraphQL Playground in production environment.
diff --git a/node_modules/strapi-plugin-graphql/hooks/graphql/load-config.js b/node_modules/strapi-plugin-graphql/hooks/graphql/load-config.js
index 78e2bff..ac81730 100644
--- a/node_modules/strapi-plugin-graphql/hooks/graphql/load-config.js
+++ b/node_modules/strapi-plugin-graphql/hooks/graphql/load-config.js
@@ -11,10 +11,7 @@ const loadPluginsGraphqlConfig = async installedPlugins => {
   for (let pluginName of installedPlugins) {
     const pluginDir = loadUtils.findPackagePath(`strapi-plugin-${pluginName}`);
 
-    const result = await loadUtils.loadFiles(
-      pluginDir,
-      'config/*.graphql?(.js)'
-    );
+    const result = await loadUtils.loadFiles(pluginDir, 'config/*.graphql?(.js)');
 
     _.set(root, ['plugins', pluginName], result);
   }
diff --git a/node_modules/strapi-plugin-graphql/services/Mutation.js b/node_modules/strapi-plugin-graphql/services/Mutation.js
index 0280071..fbd02f2 100644
--- a/node_modules/strapi-plugin-graphql/services/Mutation.js
+++ b/node_modules/strapi-plugin-graphql/services/Mutation.js
@@ -48,24 +48,17 @@ module.exports = {
       const resolver = _.get(handler, `Mutation.${queryName}.resolver`);
 
       if (_.isString(resolver) || _.isPlainObject(resolver)) {
-        const { handler = resolver } = _.isPlainObject(resolver)
-          ? resolver
-          : {};
+        const { handler = resolver } = _.isPlainObject(resolver) ? resolver : {};
 
         // Retrieve the controller's action to be executed.
         const [name, action] = handler.split('.');
 
         const controller = plugin
-          ? _.get(
-              strapi.plugins,
-              `${plugin}.controllers.${_.toLower(name)}.${action}`
-            )
+          ? _.get(strapi.plugins, `${plugin}.controllers.${_.toLower(name)}.${action}`)
           : _.get(strapi.controllers, `${_.toLower(name)}.${action}`);
 
         if (!controller) {
-          throw new Error(
-            `Cannot find the controller's action ${name}.${action}`
-          );
+          throw new Error(`Cannot find the controller's action ${name}.${action}`);
         }
 
         // We're going to return a controller instead.
@@ -90,17 +83,13 @@ module.exports = {
       // We're going to return a controller instead.
       isController = true;
 
-      const controllers = plugin
-        ? strapi.plugins[plugin].controllers
-        : strapi.controllers;
+      const controllers = plugin ? strapi.plugins[plugin].controllers : strapi.controllers;
 
       // Try to find the controller that should be related to this model.
       const controller = _.get(controllers, `${name}.${action}`);
 
       if (!controller) {
-        throw new Error(
-          `Cannot find the controller's action ${name}.${action}`
-        );
+        throw new Error(`Cannot find the controller's action ${name}.${action}`);
       }
 
       // Push global policy to make sure the permissions will work as expected.
@@ -131,16 +120,11 @@ module.exports = {
       const [name, action] = resolverOf.split('.');
 
       const controller = plugin
-        ? _.get(
-            strapi.plugins,
-            `${plugin}.controllers.${_.toLower(name)}.${action}`
-          )
+        ? _.get(strapi.plugins, `${plugin}.controllers.${_.toLower(name)}.${action}`)
         : _.get(strapi.controllers, `${_.toLower(name)}.${action}`);
 
       if (!controller) {
-        throw new Error(
-          `Cannot find the controller's action ${name}.${action}`
-        );
+        throw new Error(`Cannot find the controller's action ${name}.${action}`);
       }
 
       policiesFn[0] = policyUtils.globalPolicy({
@@ -159,9 +143,7 @@ module.exports = {
       try {
         policiesFn.push(policyUtils.get(policyName, plugin, name));
       } catch (error) {
-        strapi.stopWithError(
-          `Error building graphql mutation "${queryName}": ${error.message}`
-        );
+        strapi.stopWithError(`Error building graphql mutation "${queryName}": ${error.message}`);
       }
     });
 
@@ -192,10 +174,7 @@ module.exports = {
       const policy = await compose(policiesFn)(ctx);
 
       // Policy doesn't always return errors but they update the current context.
-      if (
-        _.isError(ctx.request.graphql) ||
-        _.get(ctx.request.graphql, 'isBoom')
-      ) {
+      if (_.isError(ctx.request.graphql) || _.get(ctx.request.graphql, 'isBoom')) {
         return ctx.request.graphql;
       }
 
diff --git a/node_modules/strapi-plugin-graphql/services/Query.js b/node_modules/strapi-plugin-graphql/services/Query.js
index 3d5ee8b..3467502 100644
--- a/node_modules/strapi-plugin-graphql/services/Query.js
+++ b/node_modules/strapi-plugin-graphql/services/Query.js
@@ -82,9 +82,7 @@ module.exports = {
     if (isSingular === 'force') {
       queryName = name;
     } else {
-      queryName = isSingular
-        ? pluralize.singular(name)
-        : pluralize.plural(name);
+      queryName = isSingular ? pluralize.singular(name) : pluralize.plural(name);
     }
 
     // Retrieve policies.
@@ -105,24 +103,17 @@ module.exports = {
       const resolver = _.get(handler, `Query.${queryName}.resolver`);
 
       if (_.isString(resolver) || _.isPlainObject(resolver)) {
-        const { handler = resolver } = _.isPlainObject(resolver)
-          ? resolver
-          : {};
+        const { handler = resolver } = _.isPlainObject(resolver) ? resolver : {};
 
         // Retrieve the controller's action to be executed.
         const [name, action] = handler.split('.');
 
         const controller = plugin
-          ? _.get(
-              strapi.plugins,
-              `${plugin}.controllers.${_.toLower(name)}.${action}`
-            )
+          ? _.get(strapi.plugins, `${plugin}.controllers.${_.toLower(name)}.${action}`)
           : _.get(strapi.controllers, `${_.toLower(name)}.${action}`);
 
         if (!controller) {
-          throw new Error(
-            `Cannot find the controller's action ${name}.${action}`
-          );
+          throw new Error(`Cannot find the controller's action ${name}.${action}`);
         }
 
         // We're going to return a controller instead.
@@ -147,9 +138,7 @@ module.exports = {
       // We're going to return a controller instead.
       isController = true;
 
-      const controllers = plugin
-        ? strapi.plugins[plugin].controllers
-        : strapi.controllers;
+      const controllers = plugin ? strapi.plugins[plugin].controllers : strapi.controllers;
 
       // Try to find the controller that should be related to this model.
       const controller = isSingular
@@ -158,9 +147,7 @@ module.exports = {
 
       if (!controller) {
         throw new Error(
-          `Cannot find the controller's action ${name}.${
-            isSingular ? 'findOne' : 'find'
-          }`
+          `Cannot find the controller's action ${name}.${isSingular ? 'findOne' : 'find'}`
         );
       }
 
@@ -203,16 +190,11 @@ module.exports = {
       const [name, action] = resolverOf.split('.');
 
       const controller = plugin
-        ? _.get(
-            strapi.plugins,
-            `${plugin}.controllers.${_.toLower(name)}.${action}`
-          )
+        ? _.get(strapi.plugins, `${plugin}.controllers.${_.toLower(name)}.${action}`)
         : _.get(strapi.controllers, `${_.toLower(name)}.${action}`);
 
       if (!controller) {
-        throw new Error(
-          `Cannot find the controller's action ${name}.${action}`
-        );
+        throw new Error(`Cannot find the controller's action ${name}.${action}`);
       }
 
       policiesFn[0] = policyUtils.globalPolicy({
@@ -231,9 +213,7 @@ module.exports = {
       try {
         policiesFn.push(policyUtils.get(policyName, plugin, name));
       } catch (error) {
-        strapi.stopWithError(
-          `Error building graphql query "${queryName}": ${error.message}`
-        );
+        strapi.stopWithError(`Error building graphql query "${queryName}": ${error.message}`);
       }
     });
 
@@ -274,10 +254,7 @@ module.exports = {
       const policy = await compose(policiesFn)(ctx);
 
       // Policy doesn't always return errors but they update the current context.
-      if (
-        _.isError(ctx.request.graphql) ||
-        _.get(ctx.request.graphql, 'isBoom')
-      ) {
+      if (_.isError(ctx.request.graphql) || _.get(ctx.request.graphql, 'isBoom')) {
         return ctx.request.graphql;
       }
 
diff --git a/node_modules/strapi-plugin-graphql/services/build-aggregation.js b/node_modules/strapi-plugin-graphql/services/build-aggregation.js
index 7c11394..d7fee20 100644
--- a/node_modules/strapi-plugin-graphql/services/build-aggregation.js
+++ b/node_modules/strapi-plugin-graphql/services/build-aggregation.js
@@ -11,7 +11,7 @@ const pluralize = require('pluralize');
 const { convertRestQueryParams, buildQuery } = require('strapi-utils');
 
 const { buildQuery: buildQueryResolver } = require('./resolvers-builder');
-const { convertToParams, convertToQuery } = require('./utils');
+const { convertToParams, convertToQuery, nonRequired } = require('./utils');
 const { toSDL } = require('./schema-definitions');
 
 /**
@@ -19,15 +19,15 @@ const { toSDL } = require('./schema-definitions');
  *
  * @returns {Boolean}
  */
-const isPrimitiveType = _type => {
-  const type = _type.replace('!', '');
+const isPrimitiveType = type => {
+  const nonRequiredType = nonRequired(type);
   return (
-    type === 'Int' ||
-    type === 'Float' ||
-    type === 'String' ||
-    type === 'Boolean' ||
-    type === 'DateTime' ||
-    type === 'JSON'
+    nonRequiredType === 'Int' ||
+    nonRequiredType === 'Float' ||
+    nonRequiredType === 'String' ||
+    nonRequiredType === 'Boolean' ||
+    nonRequiredType === 'DateTime' ||
+    nonRequiredType === 'JSON'
   );
 };
 
@@ -60,7 +60,8 @@ const isNotOfTypeArray = type => {
  * Returns all fields of type Integer or float
  */
 const isNumberType = type => {
-  return type === 'Int' || type === 'Float';
+  const nonRequiredType = nonRequired(type);
+  return nonRequiredType === 'Int' || nonRequiredType === 'Float';
 };
 
 /**
@@ -171,12 +172,7 @@ const extractType = function(_type, attributeType) {
  *   age: function ageResolver() { .... }
  * }
  */
-const createAggregationFieldsResolver = function(
-  model,
-  fields,
-  operation,
-  typeCheck
-) {
+const createAggregationFieldsResolver = function(model, fields, operation, typeCheck) {
   return createFieldsResolver(
     fields,
     async (obj, options, context, fieldResolver, fieldKey) => {
@@ -185,13 +181,28 @@ const createAggregationFieldsResolver = function(
         ...convertToQuery(obj.where),
       });
 
-      return buildQuery({ model, filters, aggregate: true })
-        .group({
-          _id: null,
-          [fieldKey]: { [`$${operation}`]: `$${fieldKey}` },
-        })
-        .exec()
-        .then(result => _.get(result, [0, fieldKey]));
+      if (model.orm === 'mongoose') {
+        return buildQuery({ model, filters, aggregate: true })
+          .group({
+            _id: null,
+            [fieldKey]: { [`$${operation}`]: `$${fieldKey}` },
+          })
+          .exec()
+          .then(result => _.get(result, [0, fieldKey]));
+      }
+
+      if (model.orm === 'bookshelf') {
+        return model
+          .query(qb => {
+            // apply filters
+            buildQuery({ model, filters })(qb);
+
+            // `sum, avg, min, max` pass nicely to knex :->
+            qb[operation](`${fieldKey} as ${operation}_${fieldKey}`);
+          })
+          .fetch()
+          .then(result => result.get(`${operation}_${fieldKey}`));
+      }
     },
     typeCheck
   );
@@ -240,31 +251,55 @@ const preProcessGroupByData = function({ result, fieldKey, filters }) {
  * }
  */
 const createGroupByFieldsResolver = function(model, fields) {
-  const resolver = async (
-    filters,
-    options,
-    context,
-    fieldResolver,
-    fieldKey
-  ) => {
-    const params = {
+  const resolver = async (filters, options, context, fieldResolver, fieldKey) => {
+    const params = convertRestQueryParams({
       ...convertToParams(_.omit(filters, 'where')),
       ...convertToQuery(filters.where),
-    };
-
-    const result = await buildQuery({
-      model,
-      filters: convertRestQueryParams(params),
-      aggregate: true,
-    }).group({
-      _id: `$${fieldKey === 'id' ? model.primaryKey : fieldKey}`,
     });
 
-    return preProcessGroupByData({
-      result,
-      fieldKey,
-      filters,
-    });
+    if (model.orm === 'mongoose') {
+      const result = await buildQuery({
+        model,
+        filters: params,
+        aggregate: true,
+      }).group({
+        _id: `$${fieldKey === 'id' ? model.primaryKey : fieldKey}`,
+      });
+
+      return preProcessGroupByData({
+        result,
+        fieldKey,
+        filters,
+      });
+    }
+
+    if (model.orm === 'bookshelf') {
+      return model
+        .query(qb => {
+          buildQuery({ model, filters: params })(qb);
+          qb.groupBy(fieldKey);
+          qb.select(fieldKey);
+        })
+        .fetchAll()
+        .then(result => {
+          let values = result.models
+            .map(m => m.get(fieldKey)) // extract aggregate field
+            .filter(v => !!v) // remove null
+            .map(v => '' + v); // convert to string
+          return values.map(v => ({
+            key: v,
+            connection: () => {
+              return {
+                ..._.omit(filters, ['limit']), // we shouldn't carry limit to sub-field
+                where: {
+                  ...(filters.where || {}),
+                  [fieldKey]: v,
+                },
+              };
+            },
+          }));
+        });
+    }
   };
 
   return createFieldsResolver(fields, resolver, () => true);
@@ -276,10 +311,8 @@ const createGroupByFieldsResolver = function(model, fields) {
  */
 const generateConnectionFieldsTypes = function(fields, model) {
   const { globalId, attributes } = model;
-  const primitiveFields = getFieldsByTypes(
-    fields,
-    isNotOfTypeArray,
-    (type, name) => extractType(type, (attributes[name] || {}).type)
+  const primitiveFields = getFieldsByTypes(fields, isNotOfTypeArray, (type, name) =>
+    extractType(type, (attributes[name] || {}).type)
   );
 
   const connectionFields = _.mapValues(primitiveFields, fieldType => ({
@@ -290,9 +323,7 @@ const generateConnectionFieldsTypes = function(fields, model) {
   return Object.keys(primitiveFields)
     .map(
       fieldKey =>
-        `type ${globalId}Connection${_.upperFirst(fieldKey)} {${toSDL(
-          connectionFields[fieldKey]
-        )}}`
+        `type ${globalId}Connection${_.upperFirst(fieldKey)} {${toSDL(connectionFields[fieldKey])}}`
     )
     .join('\n\n');
 };
@@ -305,8 +336,7 @@ const formatConnectionGroupBy = function(fields, model) {
   const groupByFields = getFieldsByTypes(
     fields,
     isNotOfTypeArray,
-    (fieldType, fieldName) =>
-      `[${globalId}Connection${_.upperFirst(fieldName)}]`
+    (fieldType, fieldName) => `[${globalId}Connection${_.upperFirst(fieldName)}]`
   );
 
   // Get the generated field types
@@ -343,9 +373,7 @@ const formatConnectionAggregator = function(fields, model, modelName) {
   }
 
   const gqlNumberFormat = toSDL(numericFields);
-  let aggregatorTypes = `type ${aggregatorGlobalId} {${toSDL(
-    initialFields
-  )}}\n\n`;
+  let aggregatorTypes = `type ${aggregatorGlobalId} {${toSDL(initialFields)}}\n\n`;
 
   let resolvers = {
     [aggregatorGlobalId]: {
@@ -480,9 +508,7 @@ const formatModelConnectionsGQL = function({ fields, model, name, resolver }) {
   };
   const pluralName = pluralize.plural(_.camelCase(name));
 
-  let modelConnectionTypes = `type ${connectionGlobalId} {${toSDL(
-    connectionFields
-  )}}\n\n`;
+  let modelConnectionTypes = `type ${connectionGlobalId} {${toSDL(connectionFields)}}\n\n`;
   if (aggregatorFormat) {
     modelConnectionTypes += aggregatorFormat.type;
   }
@@ -490,10 +516,7 @@ const formatModelConnectionsGQL = function({ fields, model, name, resolver }) {
 
   const queryName = `${pluralName}Connection(sort: String, limit: Int, start: Int, where: JSON)`;
 
-  const connectionResolver = buildQueryResolver(
-    `${pluralName}Connection.values`,
-    resolver
-  );
+  const connectionResolver = buildQueryResolver(`${pluralName}Connection.values`, resolver);
 
   const connectionQueryName = `${pluralName}Connection`;
 
diff --git a/node_modules/strapi-plugin-graphql/services/data-loaders.js b/node_modules/strapi-plugin-graphql/services/data-loaders.js
index 34b6352..bfee4e7 100644
--- a/node_modules/strapi-plugin-graphql/services/data-loaders.js
+++ b/node_modules/strapi-plugin-graphql/services/data-loaders.js
@@ -44,15 +44,10 @@ module.exports = {
     this.loaders[modelUID] = new DataLoader(
       keys => {
         // Extract queries from keys and merge similar queries.
-        const { queries, map } = this.extractQueries(
-          modelUID,
-          _.cloneDeep(keys)
-        );
+        const { queries, map } = this.extractQueries(modelUID, _.cloneDeep(keys));
 
         // Run queries in parallel.
-        return Promise.all(
-          queries.map(query => this.makeQuery(modelUID, query))
-        ).then(results => {
+        return Promise.all(queries.map(query => this.makeQuery(modelUID, query))).then(results => {
           // Use to match initial queries order.
           return this.mapData(modelUID, keys, map, results);
         });
@@ -69,9 +64,7 @@ module.exports = {
     // Use map to re-dispatch data correctly based on initial keys.
     return originalMap.map((query, index) => {
       // Find the index of where we should extract the results.
-      const indexResults = map.findIndex(
-        queryMap => queryMap.indexOf(index) !== -1
-      );
+      const indexResults = map.findIndex(queryMap => queryMap.indexOf(index) !== -1);
       const data = results[indexResults];
 
       // Retrieving referring model.
@@ -81,8 +74,7 @@ module.exports = {
         // Return object instead of array for one-to-many relationship.
         return data.find(
           entry =>
-            entry[ref.primaryKey].toString() ===
-            (query.params[ref.primaryKey] || '').toString()
+            entry[ref.primaryKey].toString() === (query.params[ref.primaryKey] || '').toString()
         );
       }
 
@@ -120,11 +112,7 @@ module.exports = {
 
       return data
         .filter(entry => entry !== undefined)
-        .filter(entry =>
-          ids
-            .map(id => id.toString())
-            .includes(entry[ref.primaryKey].toString())
-        )
+        .filter(entry => ids.map(id => id.toString()).includes(entry[ref.primaryKey].toString()))
         .slice(skip, skip + limit);
     });
   },
@@ -165,9 +153,10 @@ module.exports = {
       .value();
 
     // Run query and remove duplicated ID.
-    return strapi.plugins['content-manager'].services[
-      'contentmanager'
-    ].fetchAll({ model: modelUID }, params);
+    return strapi.plugins['content-manager'].services['contentmanager'].fetchAll(
+      { model: modelUID },
+      params
+    );
   },
 
   extractQueries: function(modelUID, keys) {
diff --git a/node_modules/strapi-plugin-graphql/services/resolvers-builder.js b/node_modules/strapi-plugin-graphql/services/resolvers-builder.js
index aa88371..106b8a3 100644
--- a/node_modules/strapi-plugin-graphql/services/resolvers-builder.js
+++ b/node_modules/strapi-plugin-graphql/services/resolvers-builder.js
@@ -7,8 +7,15 @@
 const _ = require('lodash');
 const compose = require('koa-compose');
 
-const { convertToParams, convertToQuery, amountLimiting } = require('./utils');
 const { policy: policyUtils } = require('strapi-utils');
+const {
+  convertToParams,
+  convertToQuery,
+  amountLimiting,
+  getAction,
+  getActionDetails,
+  isResolvablePath,
+} = require('./utils');
 
 const buildMutation = (mutationName, config) => {
   const { resolver, resolverOf, transformOutput = _.identity } = config;
@@ -27,6 +34,8 @@ const buildMutation = (mutationName, config) => {
       const ctx = buildMutationContext({ options, graphqlContext });
 
       await policiesMiddleware(ctx);
+      graphqlContext.context = ctx;
+
       return resolver(root, options, graphqlContext);
     };
   }
@@ -52,10 +61,7 @@ const buildMutation = (mutationName, config) => {
 const buildMutationContext = ({ options, graphqlContext }) => {
   const { context } = graphqlContext;
 
-  const ctx = context.app.createContext(
-    _.clone(context.req),
-    _.clone(context.res)
-  );
+  const ctx = context.app.createContext(_.clone(context.req), _.clone(context.res));
 
   if (options.input && options.input.where) {
     ctx.params = convertToParams(options.input.where || {});
@@ -89,6 +95,8 @@ const buildQuery = (queryName, config) => {
       const { ctx, opts } = buildQueryContext({ options, graphqlContext });
 
       await policiesMiddleware(ctx);
+      graphqlContext.context = ctx;
+
       return resolver(root, opts, graphqlContext);
     };
   }
@@ -119,10 +127,7 @@ const validateResolverOption = config => {
     throw new Error(`Missing "resolverOf" option with custom resolver.`);
   }
 
-  if (
-    !_.isUndefined(policies) &&
-    (!Array.isArray(policies) || !_.every(policies, _.isString))
-  ) {
+  if (!_.isUndefined(policies) && (!Array.isArray(policies) || !_.every(policies, _.isString))) {
     throw new Error('Policies option must be an array of string.');
   }
 
@@ -133,10 +138,7 @@ const buildQueryContext = ({ options, graphqlContext }) => {
   const { context } = graphqlContext;
   const _options = _.cloneDeep(options);
 
-  const ctx = context.app.createContext(
-    _.clone(context.req),
-    _.clone(context.res)
-  );
+  const ctx = context.app.createContext(_.clone(context.req), _.clone(context.res));
 
   // Note: we've to used the Object.defineProperties to reset the prototype. It seems that the cloning the context
   // cause a lost of the Object prototype.
@@ -152,80 +154,9 @@ const buildQueryContext = ({ options, graphqlContext }) => {
   return { ctx, opts };
 };
 
-const getAction = resolver => {
-  if (!_.isString(resolver)) {
-    throw new Error(`Error building query. Expected a string, got ${resolver}`);
-  }
-
-  const actionDetails = getActionDetails(resolver);
-  const actionFn = getActionFn(actionDetails);
-
-  if (!actionFn) {
-    throw new Error(
-      `[GraphQL] Cannot find action "${resolver}". Check your graphql configurations.`
-    );
-  }
-
-  return actionFn;
-};
-
-const getActionFn = details => {
-  const { controller, action, plugin, api } = details;
-
-  if (plugin) {
-    return _.get(strapi.plugins, [
-      _.toLower(plugin),
-      'controllers',
-      _.toLower(controller),
-      action,
-    ]);
-  }
-
-  return _.get(strapi.api, [
-    _.toLower(api),
-    'controllers',
-    _.toLower(controller),
-    action,
-  ]);
-};
-
-const getActionDetails = resolver => {
-  if (resolver.startsWith('plugins::')) {
-    const [, path] = resolver.split('::');
-    const [plugin, controller, action] = path.split('.');
-
-    return { plugin, controller, action };
-  }
-
-  if (resolver.startsWith('application::')) {
-    const [, path] = resolver.split('::');
-    const [api, controller, action] = path.split('.');
-
-    return { api, controller, action };
-  }
-
-  const args = resolver.split('.');
-
-  if (args.length === 3) {
-    const [api, controller, action] = args;
-    return { api, controller, action };
-  }
-
-  // if direct api access
-  if (args.length === 2) {
-    const [controller, action] = args;
-    return { api: controller, controller, action };
-  }
-
-  throw new Error(
-    `[GraphQL] Could not find action for resolver "${resolver}". Check your graphql configurations.`
-  );
-};
-
 /**
  * Checks if a resolverPath (resolver or resovlerOf) might be resolved
  */
-const isResolvablePath = path => _.isString(path) && !_.isEmpty(path);
 
 const getPolicies = config => {
   const { resolver, policies = [], resolverOf } = config;
@@ -234,9 +165,7 @@ const getPolicies = config => {
 
   const policyFns = [];
 
-  const { controller, action, plugin: pathPlugin } = isResolvablePath(
-    resolverOf
-  )
+  const { controller, action, plugin: pathPlugin } = isResolvablePath(resolverOf)
     ? getActionDetails(resolverOf)
     : getActionDetails(resolver);
 
diff --git a/node_modules/strapi-plugin-graphql/services/schema-generator.js b/node_modules/strapi-plugin-graphql/services/schema-generator.js
index 4699e1b..a7104f2 100644
--- a/node_modules/strapi-plugin-graphql/services/schema-generator.js
+++ b/node_modules/strapi-plugin-graphql/services/schema-generator.js
@@ -25,9 +25,7 @@ const generateSchema = () => {
   const shadowCRUDEnabled = strapi.plugins.graphql.config.shadowCRUD !== false;
 
   // Generate type definition and query/mutation for models.
-  const shadowCRUD = shadowCRUDEnabled
-    ? buildModelsShadowCRUD()
-    : createDefaultSchema();
+  const shadowCRUD = shadowCRUDEnabled ? buildModelsShadowCRUD() : createDefaultSchema();
 
   const _schema = strapi.plugins.graphql.config._schema.graphql;
 
@@ -35,15 +33,9 @@ const generateSchema = () => {
   const { definition, query, mutation, resolver = {} } = _schema;
 
   // Polymorphic.
-  const polymorphicSchema = Types.addPolymorphicUnionType(
-    definition + shadowCRUD.definition
-  );
+  const polymorphicSchema = Types.addPolymorphicUnionType(definition + shadowCRUD.definition);
 
-  const builtResolvers = _.merge(
-    {},
-    shadowCRUD.resolvers,
-    polymorphicSchema.resolvers
-  );
+  const builtResolvers = _.merge({}, shadowCRUD.resolvers, polymorphicSchema.resolvers);
 
   const extraResolvers = diffResolvers(_schema.resolver, builtResolvers);
 
@@ -54,12 +46,10 @@ const generateSchema = () => {
     return {};
   }
 
-  const queryFields =
-    shadowCRUD.query && toSDL(shadowCRUD.query, resolver.Query, null, 'query');
+  const queryFields = shadowCRUD.query && toSDL(shadowCRUD.query, resolver.Query, null, 'query');
 
   const mutationFields =
-    shadowCRUD.mutation &&
-    toSDL(shadowCRUD.mutation, resolver.Mutation, null, 'mutation');
+    shadowCRUD.mutation && toSDL(shadowCRUD.mutation, resolver.Mutation, null, 'mutation');
 
   const scalars = Types.getScalars();
 
@@ -101,7 +91,9 @@ const generateSchema = () => {
   }
 
   // Remove custom scalar (like Upload);
-  typeDefs = Types.removeCustomScalar(typeDefs, resolvers);
+  if (!strapi.plugins.graphql.config.federation) {
+    typeDefs = Types.removeCustomScalar(typeDefs, resolvers);
+  }
 
   return {
     typeDefs: gql(typeDefs),
@@ -120,9 +112,7 @@ const writeGenerateSchema = schema => {
 };
 
 const buildModelsShadowCRUD = () => {
-  const models = Object.values(strapi.models).filter(
-    model => model.internal !== true
-  );
+  const models = Object.values(strapi.models).filter(model => model.internal !== true);
 
   const pluginModels = Object.values(strapi.plugins)
     .map(plugin => Object.values(plugin.models) || [])
@@ -155,20 +145,12 @@ const buildResolvers = resolvers => {
 
       switch (type) {
         case 'Mutation': {
-          _.set(
-            acc,
-            [type, resolverName],
-            buildMutation(resolverName, resolverObj)
-          );
+          _.set(acc, [type, resolverName], buildMutation(resolverName, resolverObj));
 
           break;
         }
         default: {
-          _.set(
-            acc,
-            [type, resolverName],
-            buildQuery(resolverName, resolverObj)
-          );
+          _.set(acc, [type, resolverName], buildQuery(resolverName, resolverObj));
           break;
         }
       }
diff --git a/node_modules/strapi-plugin-graphql/services/type-builder.js b/node_modules/strapi-plugin-graphql/services/type-builder.js
index a718d15..36ac841 100644
--- a/node_modules/strapi-plugin-graphql/services/type-builder.js
+++ b/node_modules/strapi-plugin-graphql/services/type-builder.js
@@ -16,8 +16,7 @@ const GraphQLLong = require('graphql-type-long');
 const Time = require('../types/time');
 const { toSingular, toInputName } = require('./naming');
 
-const isScalarAttribute = ({ type }) =>
-  type && !['component', 'dynamiczone'].includes(type);
+const isScalarAttribute = ({ type }) => type && !['component', 'dynamiczone'].includes(type);
 
 module.exports = {
   /**
@@ -90,9 +89,7 @@ module.exports = {
         typeName =
           action === 'update'
             ? `edit${_.upperFirst(toSingular(globalId))}Input`
-            : `${_.upperFirst(toSingular(globalId))}Input${
-                required ? '!' : ''
-              }`;
+            : `${_.upperFirst(toSingular(globalId))}Input${required ? '!' : ''}`;
       }
 
       if (repeatable === true) {
@@ -104,9 +101,7 @@ module.exports = {
     if (attribute.type === 'dynamiczone') {
       const { required } = attribute;
 
-      const unionName = `${modelName}${_.upperFirst(
-        _.camelCase(attributeName)
-      )}DynamicZone`;
+      const unionName = `${modelName}${_.upperFirst(_.camelCase(attributeName))}DynamicZone`;
 
       let typeName = unionName;
 
@@ -202,9 +197,7 @@ module.exports = {
   addPolymorphicUnionType(definition) {
     const types = graphql
       .parse(definition)
-      .definitions.filter(
-        def => def.kind === 'ObjectTypeDefinition' && def.name.value !== 'Query'
-      )
+      .definitions.filter(def => def.kind === 'ObjectTypeDefinition' && def.name.value !== 'Query')
       .map(def => def.name.value);
 
     if (types.length > 0) {
@@ -278,6 +271,7 @@ module.exports = {
           .join('\n')}
       }
     `;
+
     return inputs;
   },
 
diff --git a/node_modules/strapi-plugin-graphql/services/type-definitions.js b/node_modules/strapi-plugin-graphql/services/type-definitions.js
index a11a55d..a710347 100644
--- a/node_modules/strapi-plugin-graphql/services/type-definitions.js
+++ b/node_modules/strapi-plugin-graphql/services/type-definitions.js
@@ -12,22 +12,18 @@ const DynamicZoneScalar = require('../types/dynamiczoneScalar');
 
 const { formatModelConnectionsGQL } = require('./build-aggregation');
 const types = require('./type-builder');
-const {
-  mergeSchemas,
-  convertToParams,
-  convertToQuery,
-  amountLimiting,
-} = require('./utils');
+const { mergeSchemas, convertToParams, convertToQuery, amountLimiting } = require('./utils');
 const { toSDL, getTypeDescription } = require('./schema-definitions');
 const { toSingular, toPlural } = require('./naming');
 const { buildQuery, buildMutation } = require('./resolvers-builder');
+const { actionExists } = require('./utils');
 
 const isQueryEnabled = (schema, name) => {
-  return _.get(schema, ['resolver', 'Query', name]) !== false;
+  return _.get(schema, `resolver.Query.${name}`) !== false;
 };
 
 const isMutationEnabled = (schema, name) => {
-  return _.get(schema, ['resolver', 'Mutation', name]) !== false;
+  return _.get(schema, `resolver.Mutation.${name}`) !== false;
 };
 
 const buildTypeDefObj = model => {
@@ -60,10 +56,10 @@ const buildTypeDefObj = model => {
   // Change field definition for collection relations
   associations
     .filter(association => association.type === 'collection')
+    .filter(association => attributes[association.alias].private !== true)
     .forEach(association => {
-      typeDef[
-        `${association.alias}(sort: String, limit: Int, start: Int, where: JSON)`
-      ] = typeDef[association.alias];
+      typeDef[`${association.alias}(sort: String, limit: Int, start: Int, where: JSON)`] =
+        typeDef[association.alias];
 
       delete typeDef[association.alias];
     });
@@ -90,9 +86,7 @@ const generateDynamicZoneDefinitions = (attributes, globalId, schema) => {
     .forEach(attribute => {
       const { components } = attributes[attribute];
 
-      const typeName = `${globalId}${_.upperFirst(
-        _.camelCase(attribute)
-      )}DynamicZone`;
+      const typeName = `${globalId}${_.upperFirst(_.camelCase(attribute))}DynamicZone`;
 
       if (components.length === 0) {
         // Create dummy type because graphql doesn't support empty ones
@@ -111,9 +105,7 @@ const generateDynamicZoneDefinitions = (attributes, globalId, schema) => {
           return compo.globalId;
         });
 
-        const unionType = `union ${typeName} = ${componentsTypeNames.join(
-          ' | '
-        )}`;
+        const unionType = `union ${typeName} = ${componentsTypeNames.join(' | ')}`;
 
         schema.definition += `\n${unionType}\n`;
       }
@@ -137,8 +129,7 @@ const generateDynamicZoneDefinitions = (attributes, globalId, schema) => {
 };
 
 const buildAssocResolvers = model => {
-  const contentManager =
-    strapi.plugins['content-manager'].services['contentmanager'];
+  const contentManager = strapi.plugins['content-manager'].services['contentmanager'];
 
   const { primaryKey, associations = [] } = model;
 
@@ -182,7 +173,7 @@ const buildAssocResolvers = model => {
             if (association.type === 'model') {
               params[targetModel.primaryKey] = _.get(
                 obj,
-                [association.alias, targetModel.primaryKey],
+                `${association.alias}.${targetModel.primaryKey}`,
                 obj[association.alias]
               );
             } else {
@@ -194,8 +185,7 @@ const buildAssocResolvers = model => {
               };
 
               if (
-                ((association.nature === 'manyToMany' &&
-                  association.dominant) ||
+                ((association.nature === 'manyToMany' && association.dominant) ||
                   association.nature === 'manyWay') &&
                 _.has(obj, association.alias) // if populated
               ) {
@@ -203,31 +193,21 @@ const buildAssocResolvers = model => {
                   queryOpts,
                   ['query', targetModel.primaryKey],
                   obj[association.alias]
-                    ? obj[association.alias]
-                        .map(val => val[targetModel.primaryKey] || val)
-                        .sort()
+                    ? obj[association.alias].map(val => val[targetModel.primaryKey] || val).sort()
                     : []
                 );
               } else {
-                _.set(
-                  queryOpts,
-                  ['query', association.via],
-                  obj[targetModel.primaryKey]
-                );
+                _.set(queryOpts, ['query', association.via], obj[targetModel.primaryKey]);
               }
             }
 
             return association.model
-              ? strapi.plugins.graphql.services['data-loaders'].loaders[
-                  targetModel.uid
-                ].load({
+              ? strapi.plugins.graphql.services['data-loaders'].loaders[targetModel.uid].load({
                   params,
                   options: queryOpts,
                   single: true,
                 })
-              : strapi.plugins.graphql.services['data-loaders'].loaders[
-                  targetModel.uid
-                ].load({
+              : strapi.plugins.graphql.services['data-loaders'].loaders[targetModel.uid].load({
                   options: queryOpts,
                   association,
                 });
@@ -308,11 +288,9 @@ const buildSingleType = model => {
 
   const singularName = toSingular(modelName);
 
-  const _schema = _.cloneDeep(
-    _.get(strapi.plugins, 'graphql.config._schema.graphql', {})
-  );
+  const _schema = _.cloneDeep(_.get(strapi.plugins, 'graphql.config._schema.graphql', {}));
 
-  const globalType = _.get(_schema, ['type', model.globalId], {});
+  const globalType = _.get(_schema, `type.${model.globalId}`, {});
 
   const localSchema = buildModelDefinition(model, globalType);
 
@@ -331,7 +309,7 @@ const buildSingleType = model => {
         Query: {
           [singularName]: buildQuery(singularName, {
             resolver: `${uid}.find`,
-            ..._.get(_schema, ['resolver', 'Query', singularName], {}),
+            ..._.get(_schema, `resolver.Query.${singularName}`, {}),
           }),
         },
       },
@@ -343,9 +321,9 @@ const buildSingleType = model => {
 
   // build every mutation
   ['update', 'delete'].forEach(action => {
-    const mutationScheam = buildMutationTypeDef({ model, action }, { _schema });
+    const mutationSchema = buildMutationTypeDef({ model, action }, { _schema });
 
-    mergeSchemas(localSchema, mutationScheam);
+    mergeSchemas(localSchema, mutationSchema);
   });
 
   return localSchema;
@@ -357,11 +335,9 @@ const buildCollectionType = model => {
   const singularName = toSingular(modelName);
   const pluralName = toPlural(modelName);
 
-  const _schema = _.cloneDeep(
-    _.get(strapi.plugins, 'graphql.config._schema.graphql', {})
-  );
+  const _schema = _.cloneDeep(_.get(strapi.plugins, 'graphql.config._schema.graphql', {}));
 
-  const globalType = _.get(_schema, ['type', model.globalId], {});
+  const globalType = _.get(_schema, `type.${model.globalId}`, {});
 
   const localSchema = {
     definition: '',
@@ -395,43 +371,42 @@ const buildCollectionType = model => {
   }
 
   if (isQueryEnabled(_schema, singularName)) {
-    _.merge(localSchema, {
-      query: {
-        [`${singularName}(id: ID!)`]: model.globalId,
-      },
-      resolvers: {
-        Query: {
-          [singularName]: buildQuery(singularName, {
-            resolver: `${uid}.findOne`,
-            ..._.get(_schema, ['resolver', 'Query', singularName], {}),
-          }),
+    const resolverOpts = {
+      resolver: `${uid}.findOne`,
+      ..._.get(_schema, `resolver.Query.${pluralName}`, {}),
+    };
+    if (actionExists(resolverOpts)) {
+      _.merge(localSchema, {
+        query: {
+          [`${singularName}(id: ID!)`]: model.globalId,
         },
-      },
-    });
+        resolvers: {
+          Query: {
+            [singularName]: buildQuery(singularName, resolverOpts),
+          },
+        },
+      });
+    }
   }
 
   if (isQueryEnabled(_schema, pluralName)) {
     const resolverOpts = {
       resolver: `${uid}.find`,
-      ..._.get(_schema, ['resolver', 'Query', pluralName], {}),
+      ..._.get(_schema, `resolver.Query.${pluralName}`, {}),
     };
-
-    const resolverFn = buildQuery(pluralName, resolverOpts);
-
-    _.merge(localSchema, {
-      query: {
-        [`${pluralName}(sort: String, limit: Int, start: Int, where: JSON)`]: `[${model.globalId}]`,
-      },
-      resolvers: {
-        Query: {
-          [pluralName]: resolverFn,
+    if (actionExists(resolverOpts)) {
+      _.merge(localSchema, {
+        query: {
+          [`${pluralName}(sort: String, limit: Int, start: Int, where: JSON)`]: `[${model.globalId}]`,
         },
-      },
-    });
+        resolvers: {
+          Query: {
+            [pluralName]: buildQuery(pluralName, resolverOpts),
+          },
+        },
+      });
 
-    // TODO: Add support for Graphql Aggregation in Bookshelf ORM
-    if (model.orm === 'mongoose') {
-      // Generation the aggregation for the given model
+      // Generate the aggregation for the given model
       const aggregationSchema = formatModelConnectionsGQL({
         fields: typeDefObj,
         model,
@@ -449,9 +424,8 @@ const buildCollectionType = model => {
 
   // build every mutation
   ['create', 'update', 'delete'].forEach(action => {
-    const mutationScheam = buildMutationTypeDef({ model, action }, { _schema });
-
-    mergeSchemas(localSchema, mutationScheam);
+    const mutationSchema = buildMutationTypeDef({ model, action }, { _schema });
+    mergeSchemas(localSchema, mutationSchema);
   });
 
   return localSchema;
@@ -461,10 +435,19 @@ const buildCollectionType = model => {
 // - Implement batch methods (need to update the content-manager as well).
 // - Implement nested transactional methods (create/update).
 const buildMutationTypeDef = ({ model, action }, { _schema }) => {
-  const { uid } = model;
   const capitalizedName = _.upperFirst(toSingular(model.modelName));
   const mutationName = `${action}${capitalizedName}`;
 
+  const resolverOpts = {
+    resolver: `${model.uid}.${action}`,
+    transformOutput: result => ({ [toSingular(model.modelName)]: result }),
+    ..._.get(_schema, `resolver.Mutation.${mutationName}`, {}),
+  };
+
+  if (!actionExists(resolverOpts)) {
+    return {};
+  }
+
   const definition = types.generateInputPayloadArguments({
     model,
     name: model.modelName,
@@ -493,13 +476,7 @@ const buildMutationTypeDef = ({ model, action }, { _schema }) => {
     },
     resolvers: {
       Mutation: {
-        [mutationName]: buildMutation(mutationName, {
-          resolver: `${uid}.${action}`,
-          transformOutput: result => ({
-            [toSingular(model.modelName)]: result,
-          }),
-          ..._.get(_schema, ['resolver', 'Mutation', mutationName], {}),
-        }),
+        [mutationName]: buildMutation(mutationName, resolverOpts),
       },
     },
   };
diff --git a/node_modules/strapi-plugin-graphql/services/utils.js b/node_modules/strapi-plugin-graphql/services/utils.js
index a3518b2..06ce312 100644
--- a/node_modules/strapi-plugin-graphql/services/utils.js
+++ b/node_modules/strapi-plugin-graphql/services/utils.js
@@ -33,7 +33,11 @@ const diffResolvers = (object, base) => {
 
   Object.keys(object).forEach(type => {
     Object.keys(object[type]).forEach(resolver => {
-      if (!_.has(base, [type, resolver])) {
+      if (type === 'Query' || type === 'Mutation') {
+        if (!_.has(base, [type, resolver])) {
+          _.set(newObj, [type, resolver], _.get(object, [type, resolver]));
+        }
+      } else {
         _.set(newObj, [type, resolver], _.get(object, [type, resolver]));
       }
     });
@@ -81,6 +85,87 @@ const amountLimiting = (params = {}) => {
   return params;
 };
 
+const nonRequired = type => type.replace('!', '');
+
+const actionExists = ({ resolver, resolverOf }) => {
+  if (isResolvablePath(resolverOf)) {
+    return true;
+  } else if (_.isFunction(resolver)) {
+    return true;
+  } else if (_.isString(resolver)) {
+    return _.isFunction(getActionFn(getActionDetails(resolver)));
+  } else {
+    throw new Error(
+      `Error building query. Expected \`resolver\` as string or a function, or \`resolverOf\` as a string. got ${{
+        resolver,
+        resolverOf,
+      }}`
+    );
+  }
+};
+
+const getAction = resolver => {
+  if (!_.isString(resolver)) {
+    throw new Error(`Error building query. Expected a string, got ${resolver}`);
+  }
+
+  const actionDetails = getActionDetails(resolver);
+  const actionFn = getActionFn(actionDetails);
+
+  if (!actionFn) {
+    throw new Error(
+      `[GraphQL] Cannot find action "${resolver}". Check your graphql configurations.`
+    );
+  }
+
+  return actionFn;
+};
+
+const getActionFn = details => {
+  const { controller, action, plugin, api } = details;
+
+  if (plugin) {
+    return _.get(strapi.plugins, [_.toLower(plugin), 'controllers', _.toLower(controller), action]);
+  }
+
+  return _.get(strapi.api, [_.toLower(api), 'controllers', _.toLower(controller), action]);
+};
+
+const getActionDetails = resolver => {
+  if (resolver.startsWith('plugins::')) {
+    const [, path] = resolver.split('::');
+    const [plugin, controller, action] = path.split('.');
+
+    return { plugin, controller, action };
+  }
+
+  if (resolver.startsWith('application::')) {
+    const [, path] = resolver.split('::');
+    const [api, controller, action] = path.split('.');
+
+    return { api, controller, action };
+  }
+
+  const args = resolver.split('.');
+
+  if (args.length === 3) {
+    const [api, controller, action] = args;
+    return { api, controller, action };
+  }
+
+  // if direct api access
+  if (args.length === 2) {
+    const [controller, action] = args;
+    return { api: controller, controller, action };
+  }
+
+  throw new Error(
+    `[GraphQL] Could not find action for resolver "${resolver}". Check your graphql configurations.`
+  );
+};
+
+const isResolvablePath = path => _.isString(path) && !_.isEmpty(path);
+
 module.exports = {
   diffResolvers,
   mergeSchemas,
@@ -88,4 +173,10 @@ module.exports = {
   convertToParams,
   convertToQuery,
   amountLimiting,
+  nonRequired,
+  actionExists,
+  getAction,
+  getActionDetails,
+  getActionFn,
+  isResolvablePath,
 };
